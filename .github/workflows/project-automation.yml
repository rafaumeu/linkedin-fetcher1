name: Project Automation

on:
  issues:
    types: [opened, labeled, unlabeled]
  pull_request:
    types: [opened, ready_for_review, review_requested]

jobs:
  project_automation:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/add-to-project@v0.5.0
        with:
          project-url: https://github.com/users/${{ github.repository_owner }}/projects/linkedin-fetcher
          github-token: ${{ secrets.PROJECT_TOKEN }}
      
      - name: Classify Issue
        if: github.event_name == 'issues'
        uses: actions/github-script@v7
        with:
          script: |
            const title = context.payload.issue.title.toLowerCase();
            const body = context.payload.issue.body.toLowerCase();
            
            // Referência ao código em LinkedInAuthService.ts
            if (title.includes('auth') || body.includes('autenticação')) {
              await github.rest.issues.addLabels({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                labels: ['auth']
              });
            }
            
            // Referência ao código em LinkedInScrapper.ts
            if (title.includes('scrap') || body.includes('extração')) {
              await github.rest.issues.addLabels({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                labels: ['scraping']
              });
            }

      - name: Auto Assign PR
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const files = await github.rest.pulls.listFiles({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: context.payload.pull_request.number
            });
            
            // Referência aos serviços no código
            const services = files.data
              .filter(file => file.filename.includes('services/'))
              .map(file => file.filename.split('/').pop().split('.')[0]);
            
            if (services.length > 0) {
              await github.rest.issues.addLabels({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                labels: services.map(s => s.toLowerCase())
              });
            } 